{"version":3,"file":"component---src-templates-blog-post-js-4b624c409ae901b6b413.js","mappings":"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","sources":["webpack://peter-wooldridge-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        {/* Optional header image */}\n        {post.frontmatter.headerImage && post.frontmatter.headerImage.childImageSharp && (\n          <GatsbyImage\n            image={getImage(post.frontmatter.headerImage)}\n            alt={post.frontmatter.title}\n            style={{ maxWidth: '500px', margin: '0 auto 2rem', borderRadius: '0.5rem', display: 'block' }}\n          />\n        )}\n        <header>\n          {/* Move Back Button Here (Above Title/Date) */}\n          <div style={{ marginBottom: '1rem' }}> {/* Adjust margin as needed */}\n            <button \n              onClick={() => window.history.back()} \n              style={{ background: 'none', border: 'none', padding: 0, color: 'var(--color-primary)', cursor: 'pointer', textDecoration: 'underline' }}\n            >\n              ← Go back\n            </button>\n          </div>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n          {/* Display Tags if they exist */}\n          {post.frontmatter.tags && post.frontmatter.tags.length > 0 && (\n            <div style={{ marginTop: '-0.5rem', marginBottom: '1rem', fontSize: 'var(--fontSize-0)' }}>\n              Tags:{` `}\n              {post.frontmatter.tags.map((tag, index) => (\n                <React.Fragment key={tag}>\n                  <Link className=\"teal-link\" to={`/tags/${tag}/`} style={{ marginRight: '0.5rem' }}>\n                    {tag}\n                  </Link>\n                  {/* Add comma separator except for the last tag - adjust if needed */}\n                  {/* {index < post.frontmatter.tags.length - 1 ? ', ' : ''} */}\n                </React.Fragment>\n              ))}\n            </div>\n          )}\n        </header>\n        <section\n          className=\"prose prose-lg max-w-none\"\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr className=\"mt-8\" />\n        <footer>\n          {/* Remove Bio component */}\n          {/* <Bio /> */}\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link className=\"teal-link\" to={`/blog${previous.fields.slug}`} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link className=\"teal-link\" to={`/blog${next.fields.slug}`} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post, site } }) => {\n  const folder = post.fields?.folder;\n  let siteUrl = site.siteMetadata?.siteUrl || '';\n  // Remove trailing slash if present\n  if (siteUrl.endsWith('/')) siteUrl = siteUrl.slice(0, -1);\n  const imageUrl = folder ? `${siteUrl}/social-cards/${folder}.png` : undefined;\n  const author = site.siteMetadata?.author?.name;\n  // Use the raw date from frontmatter for ISO string\n  const publishedTime = post.frontmatter?.date\n    ? new Date(post.frontmatter.date).toISOString()\n    : undefined;\n  return (\n    <>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        image={imageUrl}\n        twitterCardType=\"summary_large_image\"\n      />\n      <meta name=\"author\" content={author} />\n      {publishedTime && (\n        <meta property=\"article:published_time\" content={publishedTime} />\n      )}\n    </>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n        author {\n          name\n        }\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        folder\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n        summary\n        headerImage {\n          childImageSharp {\n            gatsbyImageData(width: 500, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Head","_ref2","_post$fields","_site$siteMetadata2","_site$siteMetadata3","_site$siteMetadata3$a","_post$frontmatter","data","markdownRemark","post","site","folder","fields","siteUrl","siteMetadata","endsWith","slice","imageUrl","undefined","author","name","publishedTime","frontmatter","date","Date","toISOString","React","Seo","title","description","excerpt","image","twitterCardType","content","property","_ref","_site$siteMetadata","previous","next","location","siteTitle","Layout","className","itemScope","itemType","headerImage","childImageSharp","GatsbyImage","getImage","alt","style","maxWidth","margin","borderRadius","display","marginBottom","onClick","window","history","back","background","border","padding","color","cursor","textDecoration","itemProp","tags","length","marginTop","fontSize","map","tag","index","key","Link","to","marginRight","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","slug","rel"],"sourceRoot":""}